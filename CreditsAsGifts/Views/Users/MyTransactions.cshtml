@using CreditsAsGifts.Common.Enums
@using CreditsAsGifts.Models.Gifts
@model TransactionSearchViewModel

@{
    ViewData["Title"] = "My Transactions";

    string userPhoneNumber = this.ViewData["UserPhoneNumber"].ToString();

    int counter = 1;

    if (Model.Transactions.PageNumber > 1)
    {
        counter = Model.Transactions.PageNumber * 10 - 9;
    }
}

<h1 class="text-center responsive-font-example mytransactions-text">@ViewData["Title"]</h1>
<hr />

<h5 class="searchBar-text">SEARCH BY PHONE</h5>
<form asp-action="MyTransactions" method="get">
    <div class="input-group mb-3">
        <input type="text" name="searchString" class="form-control" placeholder="Search here..." value="@Model.SearchString">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="submit" value="">Search</button>
        </div>
    </div>
</form>

<p>Results Returned: <span>@Model.Transactions.Count</span></p>
<hr />

<ul class="nav nav-tabs nav-justified mb-3" id="ex1" role="tablist">
    @foreach (TransactionType transactionType in Enum.GetValues(typeof(TransactionType)))
    {
        if (Model.TransactionType == transactionType)
        {
            <li class="nav-item">
                <a class="nav-link active">@transactionType.ToString()</a>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)transactionType)" style="color:forestgreen">@transactionType.ToString()</a>
            </li>
        }
    }
</ul>

<table class="table align-middle mb-0 bg-white text-center">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Date</th>
            <th scope="col">Sender Name</th>
            <th scope="col">Sender Phone</th>
            <th scope="col">Recipient Name</th>
            <th scope="col">Recipient Phone</th>
            <th scope="col">Number of Credits</th>
            <th scope="col">Message</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var transaction in Model.Transactions)
        {
            if (transaction.SenderPhoneNumber == userPhoneNumber)
            {
                <tr class="text-danger">
                    <td>@(counter++)</td>
                    <td>@transaction.Date.ToString("dd MMM yyyy HH:mm")</td>
                    <td>@transaction.SenderName</td>
                    <td>@transaction.SenderPhoneNumber</td>
                    <td>@transaction.RecipientName</td>
                    <td>@transaction.RecipientPhoneNumber</td>
                    <td>-@transaction.NumberOfCredits</td>
                    @if (@transaction.Message != null)
                    {
                        <td data-content="@transaction.Message"><button id="message" type="button" class="btn-sm btn-open-message" data-toggle="modal" data-target="#exampleModal">Open</button></td>
                    }
                </tr>
            }
            else
            {
                <tr>
                    <td>@(counter++)</td>
                    <td>@transaction.Date.ToString("dd MMM yyyy HH:mm")</td>
                    <td>@transaction.SenderName</td>
                    <td>@transaction.SenderPhoneNumber</td>
                    <td>@transaction.RecipientName</td>
                    <td>@transaction.RecipientPhoneNumber</td>
                    <td>+@transaction.NumberOfCredits</td>
                    @if (@transaction.Message != null)
                    {
                        <td data-content="@transaction.Message"><button id="message" type="button" class="btn-sm btn-open-message" data-toggle="modal" data-target="#exampleModal">Open</button></td>
                    }
                </tr>
            }
        }
    </tbody>
</table>
<br />

@if (Model.Transactions.TotalPages > 1)
{
    <nav aria-label="...">
        <ul class="pagination justify-content-center">
            <li class="page-item @if (!Model.Transactions.HasPreviousPage) {<text>disabled</text>}">
                <a class="page-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)Model.TransactionType)">First</a>
            </li>
            <li class="page-item @if (!Model.Transactions.HasPreviousPage) {<text>disabled</text>}">
                <a class="page-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)Model.TransactionType)" asp-route-page="@Model.Transactions.PreviousPage ">Previous</a>
            </li>
            @for (int i = Model.Transactions.PageNumber - 3; i < Model.Transactions.PageNumber; i++)
            {
                if (i > 0)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)Model.TransactionType)" asp-route-page="@i">@i</a>
                    </li>
                }
            }
            <li class="page-item active">
                <a class="page-link">
                    @Model.Transactions.PageNumber
                    <span class="sr-only">(current)</span>
                </a>
            </li>
            @for (int i = Model.Transactions.PageNumber + 1; i <= Model.Transactions.PageNumber + 3; i++)
            {
                if (i <= Model.Transactions.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)Model.TransactionType)" asp-route-page="@i">@i</a>
                    </li>
                }
            }
            <li class="page-item @if (!Model.Transactions.HasNextPage) {<text>disabled</text>}">
                <a class="page-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)Model.TransactionType)" asp-route-page="@Model.Transactions.NextPage">Next</a>
            </li>
            <li class="page-item @if (!Model.Transactions.HasNextPage) {<text>disabled</text>}">
                <a class="page-link" asp-action="MyTransactions" asp-route-searchString="@Model.SearchString" asp-route-transactionType="@((int)Model.TransactionType)" asp-route-page="@Model.Transactions.TotalPages">Last</a>
            </li>
        </ul>
    </nav>
}

<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Message</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <textarea class="form-control"></textarea>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        $('#myModal').on('shown.bs.modal', function () {
            $('#myInput').trigger('focus')
        })
    </script>

    <script>
        function openMessage() {
            let buttons = document.querySelectorAll('#message');

            for (const button of buttons) {
                button.addEventListener('click', onclick);
            }

            function onclick(ev) {
                console.log(ev.target.textContent)

                let parentElement = ev.target.parentElement;

                let message = parentElement.getAttribute('data-content');

                let modalBody = document.querySelector('.modal-body');

                modalBody.querySelector('textarea').textContent = message;
            }
        }

        openMessage();
    </script>
}
